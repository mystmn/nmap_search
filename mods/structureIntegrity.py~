import os
import subprocess, shlex


class segmentScript(object):
    def __init__(self, uniqueName, folderName):
        self.clear()        
	self.segName = uniqueName
        self.folder = folderName

    def menu(self):
        print "%s) Segment Scan list" % "1"
        print "%s) OS Indivudal Scan" % "2"
        print "%s) Port Segment Scan" % "3"

        menu = str(raw_input("Option > "))

        if menu == "1":
            self.code = "segment"
            return self.segTargetScan()
	    return True
        elif menu == "2":
            self.code = "single"
            return self.singleTargetScan()

        elif menu == "3":
            self.clear()
            return (False, "null", False)
        else:
            self.clear()
            print "%s is an invalid choice...try again\n" % menu
        #			self.menu()

    def segTargetScan(self):
        self.systemNetworkInfo()
        # Asking user what segment to scan?
        self.input = raw_input("\nWhat's the segment? > ")

        if not self.validateAllNumbers() == False:
			print self.dirExist()  # tuple[combinePath, self.userInput]
        else:
            self.segTargetScan()

	'''
    def singleTargetScan(self):

        self.input = raw_input("\nWhat's the single IP? > ")

        if not self.validateAllNumbers() == False:
            return self.dirExist()  # tuple[combinePath, self.userInput]
        else:
            self.singleTargetScan()
	'''
	
	def dirExist(self):
        # Replace periods with underscores
        # Example 162.37.59 with 162_37_59
		input_replace = self.input.replace(".", "_")

        # tmp/Segment/Date_time
        combinePath = self.folder + "/" + input_replace + "/" + self.segName
		
		if not os.path.exists(combinePath):
			os.makedirs(combinePath)
			print "Made directory %s" % combinePath
		else:
			print "Following folder already exist: '%s'" % combinePath

		print "test"
#        return a(combinePath, self.input)

    def validateAllNumbers(self):
        self.clear()
        nmb = self.input.split('.', )
        msg = "...Try again."

        if not nmb[-1].isdigit():
            print "Last character isn't a number" + msg
            return False

        nmb = len(nmb)

        if self.code == "segment":
            if nmb == 3:
                return True
            elif nmb > 3:
                print "More than 3 octaves were found in your answer" + msg
                return False
            else:
                print "Less than 3 octaves were found in your answer" + msg
                return False

        elif self.code == "single":
            if nmb == 4:
                return True
            elif nmb > 4:
                print "More than 4 octaves were found in your answer" + msg
                return False
            else:
                print "Less than 4 octaves were found in your answer" + msg
                return False
        else:
            return False

    def systemNetworkInfo(self):
        self.clear()
        strs = subprocess.check_output(shlex.split('ip r l'))
        gateway = strs.split('default via')[-1].split()[0]
        ip = strs.split('src')[-1].split()[0]

        cosmetic = "*" * 44
        print "/" + cosmetic + "/"
        print "/* Gateway %s | IP %s */" % (gateway, ip)
        print "/" + cosmetic + "/"

    def clear(self):
        return subprocess.call("clear")

		
